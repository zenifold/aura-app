// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]
  members   User[]
}

model User {
  id             String         @id
  email          String        @unique
  name           String?
  organizations  Organization[]
  projects       Project[]
  tasks          Task[]        @relation("AssignedTo")
  createdTasks   Task[]        @relation("CreatedBy")
  comments       Comment[]
}

model Project {
  id             String       @id @default(cuid())
  name           String
  description    String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  tasks          Task[]
  members        User[]
  status         String       @default("ACTIVE")
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      String      @default("TODO")
  priority    String      @default("MEDIUM")
  position    Int         @default(0)
  projectId   String
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy   User        @relation("CreatedBy", fields: [createdById], references: [id])
  createdById String
  assignedTo  User?       @relation("AssignedTo", fields: [assignedToId], references: [id])
  assignedToId String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  comments    Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
